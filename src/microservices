----13. Microservices
Microservices are the small services that work together.
These are the services which are exposed by REST.
The most important feature of the microservice-based architecture is that it can perform continuous
Delivery of a large and complex application.

1. Each service single responsibility principle
2. Loosely coupled
3. Independent Development and deployment
4. Independenty scalable

A microservice should have the following implementations:
1. Service Registry (Eureka/Consul)
2. Fault Tolerance: (Hystrix) A->B->C agar C service fail hui toh B same error A ku nahi phekna, instead gracefully handle karna
3. Gateway API - routing, filtering, security (Zuul)
4. Load balancing (Ribbon)
5. Config Server
 
Monitoring (Hystrix Dashboard)
Rest Client(Feign)

spring-boot-actuator to monitor and manage applictaion.
Netflix OSS (Open Source Software)

Microservices design patterns:
Decomposition - to break monolithic service in to small services
Strangular patttern - break monolithic into small services and then slowly move traffic from moonlithic to
					new microservices - a new service receives requests and decides where to send traffic

Saga pattern: 
Micro service with common data base:
problems:
 1. if one service receives way more requests than other then scaling has to be done which applies for all
 service. vertical scaling
 2. deletion of coloum needed for one service then need to think where it breaks for other service.
 
easiness:
 1. transactions
 2. join queries
 
 
Microservices with individual databases:
- solved above problems but intoduces challanges of transactions and join queries

transaction problem - saga pattern
join queries - CQRS



