Dynamic Programming:
	- Choice -> recursion -> 2 calls Ex. Knapsac
			- recursion -> memoization(topdown) -> topdown
	- Optimal like (Min, Max, Largest).	
	
	
2 patterns: 
 - Memoization (top down)
 - Tabulation (bottom up)
 
 
 Example:
  - Bottom up  of factorial
  	- int dp[0] = 1;
		for (int i = 1; i< =n; i++)
		{
		    dp[i] = dp[i-1] * i;
		}
		
  - top down:
		int solve(int x)
		{
		    if (x==0)
		        return 1;
		    if (dp[x]!=-1)
		        return dp[x];
		    return (dp[x] = x * solve(x-1));
		}
		
		
10 Main variations:
	1. 0-1 Knapsack (6)
	2. Unbounded Knapsack (5)
	3. Fibonacci (7)
	4. LCS (15)
	5. LIS (10)
	6. Kadane's algorithm (6)
	7. Matrix chain multiplication (7)
	8. DP on trees (4)
	9. DP on grid (14)
	10. Other (5) 