Spring-boot-concepts:

Spring container:
The Spring container is at the core of the Spring Framework. The container will create the objects, wire them together
, configure them, and manage their complete life cycle from creation till destruction.
 The Spring container uses DI to manage the components that make up an application. 

----Spring ApplicationContext
ApplicationContext is a corner stone of a Spring Boot application. It represents the Spring IoC container 
and is responsible for instantiating, configuring, and assembling the beans. The container gets its instructions 
on what objects to instantiate, configure, and assemble by reading configuration metadata. 
The configuration metadata is represented in XML, Java annotations, or Java code.

ApplicationContext provides the following:

Bean factory methods for accessing application components
The ability to load file resources in a generic way
The ability to publish events to registered listeners
The ability to resolve messages, supporting internationalization



-----1.@SpringBootApplication – used to denote the main class of a Boot Application.
This annotation combines:
	 @Configuration, -  allow to register extra beans in the context or import additional configuration classes
	 @EnableAutoConfiguration, and - Spring Boot auto-configuration attempts to automatically 
	 							configure your Spring application based on the jar dependencies 
	 							that you have added. For example, if HSQLDB is on your classpath, 
	 							and you have not manually configured any database connection beans,
	 							 then Spring Boot auto-configures an in-memory database.
	 @ComponentScan - enable @Component scan on the package where the application is located
	   - web controller classes and other components you create will be automatically discovered and 
	   	registered as beans in Spring's Application Context

As a result, when we run this Spring Boot application, it will automatically scan the components
 in the current package and its sub-packages. Thus it will register them in Spring's Application Context, 
 and allow us to inject beans using @Autowired.






----2. @Component and other stereotypes
The major difference between these stereotypes is that they are used for different classifications.
 When we annotate a class for auto-detection, we should use the respective stereotype.



@Service: So overall @Service annotation is used with classes that provide some business functionalities
 		Spring context will autodetect these classes when annotation-based configuration and classpath scanning is used.
@Repository Annotation is a specialization of @Component annotation which is used to indicate that the class provides the 
			mechanism for storage, retrieval, update, delete and search operation on objects
@Controller: Spring @Controller annotation is also a specialization of @Component annotation. The @Controller annotation
			 indicates that a particular class serves the role of a controller. 

We could use one in place of another and can still get our way around.
 @Component is a general-purpose stereotype annotation indicating that the class is a spring component 
 	and @Repository, @Service, and @Controller annotations are special types of @Component annotation. 
 
----3. spring vs spring-boot
Spring Boot is built on the top of the spring and contains all the features of spring.
Spring Boot is a microservice-based framework and making a production-ready application in it takes very little time. Following are some of the features of Spring Boot:

It allows avoiding heavy configuration of XML which is present in spring
It provides easy maintenance and creation of REST endpoints
It includes embedded Tomcat-server
Deployment is very easy, war and jar files can be easily deployed in the tomcat server

Spring Annotations are a form of metadata that provides data about a progra

----4. types of injection
 autowiring on properties/field, setters, and constructors.
@Component
public class FooService {  
    @Autowired
    private FooFormatter fooFormatter;
}

public class FooService {
    private FooFormatter fooFormatter;
    @Autowired
    public void setFormatter(FooFormatter fooFormatter) {
        this.fooFormatter = fooFormatter;
    }
}


Please note, that since Spring 4.3 you don't even need an @Autowired on your constructor, 
so you can write your code in Java style rather than tying to Spring's annotations. Your snippet would look like that:
public class FooService {
    private FooFormatter fooFormatter;
    @Autowired
    public FooService(FooFormatter fooFormatter) {
        this.fooFormatter = fooFormatter;
    }
} 

which is preferred? Constructor based injection
All Required Dependencies Are Available at Initialization Time
Constructor injection simplifies writing unit tests
Mockito, we can create mock objects that we can then pass into the constructor.

----5. Hibernate - 

When a POJO instance is in session scope, it is said to be persistent i.e hibernate 
detects any changes made to that object and synchronizes it with database when we close or flush the session.


----6. IoC vs DI
Spring IoC is achieved through Dependency Injection.
IoC is a design principle where the control flow of the program is inverted.
Dependency Injection is the method of providing the dependencies and Inversion of Control is the end result of Dependency Injection.

Dependency injection is a pattern we can use to implement IoC, where the control being inverted is setting an object's dependencies.

Connecting objects with other objects, or “injecting” objects into other objects, is done by an assembler rather than by the objects themselves.

Basically yahan, ek class ke fields normally woh class khud initialise karlena ye normal control/flow hai
DI/IOC mein kya hota spirng container bahar se beans inject karta, flow reverse hai, isliye IOC.
waisa!


----7. Qualifier
@Component("fooFormatter")
public class FooFormatter implements Formatter {
    public String format() {
        return "foo";
    }
}

@Component("barFormatter")
public class BarFormatter implements Formatter {
    public String format() {
        return "bar";
    }
}


public class FooService {
    @Autowired
    @Qualifier("fooFormatter")
    private Formatter formatter;
}



Spring uses the bean's name as a default qualifier value. 


----8.RestController vs Controller
It is a combination of @Controller and @ResponseBody, used for creating a restful controller. 
It converts the response to JSON or XML.

@Controller Map the model object to view or template



----9. PUT vs PATCH
It is partial data update
If Object has 4 params and you want to update only 2 params, 
In PUT request you have to send all the 4 params
But in PATCH you can only send 2 params


----10. Spring Actuators
An actuator is an additional feature of Spring that helps you to monitor and manage your application 
when you push it to production. These actuators include auditing, health, CPU usage, HTTP hits, 
and metric gathering, and many more that are automatically applied to your application.


--11. Restful web serivce
@GetMapping("/greeting")
put
post
delete 
patch

----12. HTTP error codes
200: SUCCESS
201: CREATED
204: No Content

300 Multiple Choices
301 Moved Permanently - The URL of the requested resource has been changed permanently. The new URL is given in the response.
302 Found

400: BAD REQUEST  - malformed request syntax etc.
401: UNAUTHORIZED - semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
403: Forbidden - The client does not have access rights to the content;the server is refusing to give the requested resource
404: RESOURCE NOT FOUND - this can also mean that the endpoint is valid but the resource itself does not exist.
405: METHOD NOT ALLOWED - For example, an API may not allow calling DELETE to remove a resource


500: SERVER ERROR
502: Bad Gateway

----13. Microservices
Microservices are the small services that work together.
These are the services which are exposed by REST.
The most important feature of the microservice-based architecture is that it can perform continuous delivery of a large and complex application.


----14. spring-cloud
https://www.javatpoint.com/microservices-components-and-standardizing-port-and-url


----15. Bucket4j - rate limiting
Rate limiting is a strategy to limit access to APIs. It restricts the number of API calls that a client can 
make within a certain time frame. This helps defend the API against overuse, both unintentional and malicious.

Bucket4j is a Java rate-limiting library based on the token-bucket algorithm

Let's consider an API that has a rate limit of 100 requests per minute. We can create a bucket with a capacity of 100,
 and a refill rate of 100 tokens per minute.




----16.RabbitMQ VS Kafka
RabbitMQ sends messages to users. These messages are removed from the queue once they are processed and acknowledged. 
Kafka is a log. It uses continuous messages, which stay in the queue until the retention time expires.

RabbitMQ employs the smart broker/dumb consumer model. The broker consistently delivers messages to consumers 
and keeps track of their status. 
Kafka uses the dumb broker/smart consumer model. Kafka doesn’t monitor
the messages each user has read. Rather, it retains unread messages only, preserving all messages
for a set amount of time. Consumers must monitor their position in each log.
 
----17.Custom annotations
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.Type)
public @interface JsonSerializable {
}


 
 
 
 18. Multithreading
 
 

