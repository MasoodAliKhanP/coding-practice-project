Spring-boot-concepts:
Java Spring Boot (Spring Boot) is a tool that accelerates and simplifies the development of 
web applications and microservices.

Spring boot Tomcat thread pool default size is 200. You can make out that different threads serve
different requests. Put a debug point on some REST endpoint, and call it multiple times from Postman etc. 

1. Spring container:
The Spring container is at the core of the Spring Framework. The container will create the objects, wire 
them together, configure them, and manage their complete life cycle from creation till destruction.
 The Spring container uses DI to manage the components that make up an application. 

----Spring ApplicationContext
ApplicationContext is a corner stone of a Spring Boot application. It represents the Spring IoC container 
and is responsible for instantiating, configuring, and assembling the beans. The container gets its instructions 
on what objects to instantiate, configure, and assemble by reading configuration metadata. 
The configuration metadata is represented in XML, Java annotations, or Java code.

ApplicationContext provides the following:

Bean factory methods for accessing application components
The ability to load file resources in a generic way
The ability to publish events to registered listeners
The ability to resolve messages, supporting internationalization



-----1.@SpringBootApplication – used to denote the main class of a Boot Application.
This annotation combines:
	 @Configuration, -  allow to register extra beans in the context or import additional configuration classes
	 @EnableAutoConfiguration, and - Spring Boot auto-configuration attempts to automatically 
	 							configure your Spring application based on the jar dependencies 
	 							that you have added. For example, if HSQLDB is on your classpath, 
	 							and you have not manually configured any database connection beans,
	 							 then Spring Boot auto-configures an in-memory database.
	 @ComponentScan - enable @Component scan on the package where the application is located
	   - web controller classes and other components you create will be automatically discovered and 
	   	registered as beans in Spring's Application Context

	As a result, when we run this Spring Boot application, it will automatically scan the components
	in the current package and its sub-packages. Thus it will register them in Spring's Application Context, 
	and allow us to inject beans using @Autowired.



----2. @Component and other stereotypes
A widely held but fixed and oversimplified image or idea of a particular type of person or thing.
The major difference between these stereotypes is that they are used for different classifications.
When we annotate a class for auto-detection, we should use the respective stereotype.

@Service: @Service annotation is used with classes that provide some business functionalities
 		Spring context will autodetect these classes when annotation-based configuration and classpath scanning is used.
@Repository Annotation is a specialization of @Component annotation which is used to indicate that the class provides the 
			mechanism for storage, retrieval, update, delete and search operation on objects
@Controller: Spring @Controller annotation is also a specialization of @Component annotation. The @Controller annotation
			 indicates that a particular class serves the role of a controller. 

We could use one in place of another and can still get our way around.
 @Component is a general-purpose stereotype annotation indicating that the class is a spring component 
 	and @Repository, @Service, and @Controller annotations are special types of @Component annotation. 
 
----3. spring vs spring-boot
Spring Boot is built on the top of the spring and contains all the features of spring.
Spring Boot is a microservice-based framework and making a production-ready application in it takes 
very little time. Following are some of the features of Spring Boot:

It allows avoiding heavy configuration of XML which is present in spring
It provides easy maintenance and creation of REST endpoints
It includes embedded Tomcat-server
Deployment is very easy, war and jar files can be easily deployed in the tomcat server

Spring Annotations are a form of metadata that provides data about a progra

----4. types of injection
 autowiring on properties/field, setters, and constructors.
@Component
public class FooService {  
    @Autowired
    private FooFormatter fooFormatter;
}

public class FooService {
    private FooFormatter fooFormatter;
    @Autowired
    public void setFormatter(FooFormatter fooFormatter) {
        this.fooFormatter = fooFormatter;
    }
}

public class FooService {
    private FooFormatter fooFormatter;
    @Autowired
    public FooService(FooFormatter fooFormatter) {
        this.fooFormatter = fooFormatter;
    }
} 

Please note, that since Spring 4.3 you don't even need an @Autowired on your constructor, 
so you can write your code in Java style rather than tying to Spring's annotation
 Your snippet would look like that:


which is preferred? Constructor based injection
All Required Dependencies Are Available at Initialization Time - it means that when instantiating the class
	we have to provide dependencies in the constructor. As opposed to simpel new myClass(), where we are 
	not providing any dependencies.
Constructor injection simplifies writing unit tests
Mockito, we can create mock objects that we can then pass into the constructor.

----5. Hibernate - 
When a POJO instance is in session scope, it is said to be persistent i.e hibernate 
detects any changes made to that object and synchronizes it with database when we close or flush the session.


----6. IoC vs DI
Spring IoC is achieved through Dependency Injection.
IoC is a design principle where the control flow of the program is inverted.
Dependency Injection is the method of providing the dependencies and Inversion of Control is the end result of Dependency Injection.

Dependency injection is a pattern we can use to implement IoC, where the control being inverted is setting an object's dependencies.

Connecting objects with other objects, or “injecting” objects into other objects, is done by an assembler rather than by the objects themselves.

Basically yahan, ek class ke fields normally woh class khud initialise karlena ye normal control/flow hai
DI/IOC mein kya hota spirng container bahar se beans inject karta, flow reverse hai, isliye IOC.
waisa!


----7. Qualifier
@Component("fooFormatter")
public class FooFormatter implements Formatter {
    public String format() {
        return "foo";
    }
}

@Component("barFormatter")
public class BarFormatter implements Formatter {
    public String format() {
        return "bar";
    }
}


public class FooService {
    @Autowired
    @Qualifier("fooFormatter")
    private Formatter formatter;
}



Spring uses the bean's name as a default qualifier value. 


----8.RestController vs Controller
It is a combination of @Controller and @ResponseBody, used for creating a restful controller. 
It converts the response to JSON or XML.

@Controller Map the model object to view or template



----9. PUT vs PATCH
It is partial data update
If Object has 4 params and you want to update only 2 params, 
In PUT request you have to send all the 4 params
But in PATCH you can only send 2 params


----10. Spring Actuators
An actuator is an additional feature of Spring that helps you to monitor and manage your application 
when you push it to production. These actuators include auditing, health, CPU usage, HTTP hits, 
and metric gathering, and many more that are automatically applied to your application.


--11. Restful web serivce
@GetMapping("/greeting")
put
post
delete 
patch

----12. HTTP error codes
200: SUCCESS
201: CREATED
204: No Content

300 Multiple Choices
301 Moved Permanently - The URL of the requested resource has been changed permanently. 
			The new URL is given in the response.
302 Found

400: BAD REQUEST  - malformed request syntax etc.
401: UNAUTHORIZED - semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
403: Forbidden - The client does not have access rights to the content;the server is refusing to give the requested resource
404: RESOURCE NOT FOUND - this can also mean that the endpoint is valid but the resource itself does not exist.
405: METHOD NOT ALLOWED - For example, an API may not allow calling DELETE to remove a resource
429: TOO MANY REQUESTS response status code indicates the user has sent too many requests in a given amount of time ("rate limiting").

500: INTERNAL SERVER ERROR
502: Bad Gateway - The HyperText Transfer Protocol (HTTP) 502 Bad Gateway server error response code indicates that the server, while acting as a gateway or proxy, received an invalid response from the upstream server

----13. Microservices
Microservices are the small services that work together.
These are the services which are exposed by REST endpoints.
The most important feature of the microservice-based architecture is that it can perform continuous delivery of a large and complex application.


----14. spring-cloud
https://www.javatpoint.com/microservices-components-and-standardizing-port-and-url


----15. Bucket4j - rate limiting
Rate limiting is a strategy to limit access to APIs. It restricts the number of API calls that a client can 
make within a certain time frame. This helps defend the API against overuse, both unintentional and malicious.

Bucket4j is a Java rate-limiting library based on the token-bucket algorithm

Let's consider an API that has a rate limit of 100 requests per minute. We can create a bucket with a capacity of 100,
 and a refill rate of 100 tokens per minute.




----16.RabbitMQ VS Kafka
RabbitMQ sends messages to users. These messages are removed from the queue once they are processed 
and acknowledged. 
Kafka is a log. It uses continuous messages, which stay in the queue until the retention time expires.

RabbitMQ employs the smart broker/dumb consumer model. The broker consistently delivers messages to consumers 
and keeps track of their status. 
Kafka uses the dumb broker/smart consumer model. Kafka doesn’t monitor
the messages each user has read. Rather, it retains unread messages only, preserving all messages
for a set amount of time. Consumers must monitor their position in each log.
 
Kafka has time to live for messages. They are not deleted even after consumer reads the message, because other 
consumers might read it too. They are deleted only after time expiry.
RabbitMQ messages are deleted as soon as consumer reads it.

----17.Custom annotations
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface CustomAnnotation {
    String role() default "";
}

public class ExampleClass {
    @CustomAnnotation(role = "admin")
    public void performAdminAction() {
        // Code for performing admin action
    }

    @CustomAnnotation(role = "user")
    public void performUserAction() {
        // Code for performing user action
    }
}

Using reflection to access custom annotation
import java.lang.reflect.Method;
public class Main {
    public static void main(String[] args) {
        ExampleClass example = new ExampleClass();
        Class<?> cls = example.getClass();
        
        Method[] methods = cls.getMethods();
        for (Method method : methods) {
            if (method.isAnnotationPresent(CustomAnnotation.class)) {
                CustomAnnotation annotation = method.getAnnotation(CustomAnnotation.class);
                String role = annotation.role();
                
                // Perform actions based on the role
                if (role.equals("admin")) {
                    System.out.println("Admin action allowed.");
                    // Perform admin action
                } else if (role.equals("user")) {
                    System.out.println("User action allowed.");
                    // Perform user action
                }
            }
        }
    }
}

 18. Multithreading
 Multithreading is to enhance performace
 Spring boot Tomcat thread pool default size is 200. You can make out that different threads server 
 different requests. Put a debug point on some REST endpoint, and call it multiple times from Postman etc.
  From debugger, check the thread name. s.b.
  
 Each request is allocated a  thread. In Spring boot the rest controllers has a default singleton scope. 
 So there is only one instance of the rest controller. The number of threads is controlled 
 by the number of instances of dispatcher servlet.You can observer through jconsole.
 
 
 19. Log management in distributed systems
 push logs to centralized system like logstash and splunk
 Logstash and Splunk can be categorized as "Log Management" tools.
	1. Use a correlation ID
	2. Structure logs appropriately
	3. Provide informative application logs
	4. Visualize log data (Kibana)
	5. Use centralized log storage (logstash, splunk, loggly etc.)
	6. query logs (elk stack)
	
 
 
 
 20. Aspect Oriented Programming
 Suppose you have a simple Java application that performs various database operations. 
 You want to log the time taken by each database operation without modifying the existing codebase. 
 This logging behavior is a cross-cutting concern that affects multiple methods or classes.
 
 With AspectJ, you can define an aspect that encapsulates the logging behavior and apply 
 it to the relevant methods or classes. Here's an example:
 
		import org.aspectj.lang.JoinPoint;
		import org.aspectj.lang.annotation.Aspect;
		import org.aspectj.lang.annotation.Before;
		
		@Aspect
		public class LoggingAspect {
		
		    @Before("execution(* com.example.database.*.*(..))")
		    public void logExecutionTime(JoinPoint joinPoint) {
		        String methodName = joinPoint.getSignature().getName();
		        System.out.println("Executing method: " + methodName);
		        
		        long startTime = System.currentTimeMillis();
		        try {
		            // Proceed with the original method execution
		            joinPoint.proceed();
		        } catch (Throwable throwable) {
		            throwable.printStackTrace();
		        }
		        
		        long endTime = System.currentTimeMillis();
		        long executionTime = endTime - startTime;
		        System.out.println("Method execution time: " + executionTime + "ms");
		    }
		}

In the LoggingAspect class, we define a method logExecutionTime() that will be executed before the methods matched by the pointcut expression execution(* com.example.database.*.*(..)). This expression selects all methods within the com.example.database package.

The logExecutionTime() method receives a JoinPoint parameter, which represents the method being intercepted. We extract the method name using joinPoint.getSignature().getName() and print it as part of the logging information.

We record the start time before proceeding with the original method execution using System.currentTimeMillis(). After the method execution, we calculate the execution time and print it.

Now, in your application code, you can have classes and methods in the com.example.database package that perform various database operations.

 21. Fail safe Iterator
 A fail-safe iterator is a type of iterator that guarantees that it will not throw a 
 ConcurrentModificationException even if the underlying collection is modified while iterating. 
 This behavior is achieved by working on a copy of the original collection's internal data structure.

 In Java, the java.util.concurrent package provides the 
 CopyOnWriteArrayList and 
 CopyOnWriteArraySet classes
 
        CopyOnWriteArrayList<String> list = new CopyOnWriteArrayList<>();
 		for(String element: list) {
        	System.out.println(element);
        	if (element.equals("Banana")) {
                list.add("Mango");
            }
        }
        System.out.println("after list: " + list);
		o/p: Apple
			Banana
			Orange
			after list: [Apple, Banana, Orange, Mango]

 22. Type of Authentications
	Basic Authentication: This is a simple authentication mechanism where the client sends a username and password with each request. The server verifies the credentials and grants access if they are valid.
	
	Form-Based Authentication: This authentication method uses HTML forms to collect user credentials (username and password) and submits them to the server for verification. Spring Security provides support for handling form-based authentication.
	
	JSON Web Token (JWT) Authentication: JWT is a popular token-based authentication mechanism. It involves issuing a digitally signed token to the client upon successful authentication. The client includes this token with subsequent requests to access protected resources. Spring Security supports JWT-based authentication.
	
	OAuth 2.0: OAuth 2.0 is an industry-standard protocol for authorization. It enables third-party applications to access protected resources on behalf of a user. Spring Security provides OAuth 2.0 support, allowing you to integrate with OAuth providers like Google, Facebook, or custom authorization servers.
	
	OpenID Connect: OpenID Connect is an extension of OAuth 2.0 and provides an identity layer on top of it. It allows clients to verify the identity of end-users based on authentication performed by an authorization server. Spring Security supports OpenID Connect for authentication and user information retrieval.

	LDAP Authentication: Lightweight Directory Access Protocol (LDAP) is often used for centralized authentication and authorization. Spring Security provides LDAP support, allowing you to authenticate users against an LDAP server.
 
 23. Spring Security - LDAP
 	
            
    LDAP Authentication: Lightweight Directory Access Protocol (LDAP) is 
    often used for centralized authentication and authorization. 
    Spring Security provides LDAP support, allowing you to authenticate users against an LDAP server.
 
 24. How to make one or specific apis free from authentication
 	- In Spring Security, you can configure an endpoint to bypass authentication
 	
 	@Configuration
	@EnableWebSecurity
	public class SecurityConfig extends WebSecurityConfigurerAdapter {
    
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
            .antMatchers("/public-endpoint").permitAll() // Endpoint to bypass authentication
            
 25. JPA Repository - how to handle table without a primary key
 	In JPA (Java Persistence API), it is generally recommended to have a primary key defined for 
 	each entity. However, if you have a table without a primary key and still want to work with 
 	it using JPA, you can use a workaround by creating a composite key using all the columns of 
 	the table.
 	
 	Suppose we have a table called "Employee" that doesn't have a primary key, but we can uniquely identify each employee by combining the "employeeId" and "companyId" columns.

		Define the Composite Key Class:
		Create a separate class to represent the composite key. Let's call it "EmployeeId":
		java
		
		@Embeddable
		public class EmployeeId implements Serializable {
		    private Long employeeId;
		    private Long companyId;
		
		    // Constructors, getters, and setters
		}
		Define the Entity Class:
		Create an entity class to map the "Employee" table using the composite key:
		java

		@Entity
		public class Employee {
		    @EmbeddedId
		    private EmployeeId id;
		
		    // Other columns and their mappings
		
		    // Constructors, getters, and setters
		}
 	
 26. synchronized & concurrent collections
 	  HashMap is not synchronized by default. HashMap is a non-thread-safe implementation of
 	  the Map interface in Java. This means that if multiple threads concurrently access or modify
 	  a HashMap instance without external synchronization, it can lead to unexpected behavior and 
 	  data inconsistencies.
 	  
 	  Concurrent hashmap achieve thread safety by using advanced and sophisticated techniques like lock stripping.
 	   For example, the ConcurrentHashMap divides the whole map into several segments and locks only 
 	   the relevant segments, which allows multiple threads to access other segments of the same 
 	   ConcurrentHashMap without locking.
 	   
 27. WebFlux - reactive programming
 	Reactive programming is a programming paradigm that focuses on building systems that can
 	 handle and respond to asynchronous events and streams of data. It provides a way to design 
 	 applications that are more responsive, resilient, and scalable.	
 	 
 	 
 	 @RestController
	public class UserController {
	
	    @GetMapping("/users")
	    public Flux<User> getAllUsers() {
	        // Simulated asynchronous data retrieval
	        return Flux.just(new User("John"), new User("Jane"), new User("Bob"))
	                .delayElements(Duration.ofSeconds(1));
	    }
	}
	Test the API endpoint using a browser or API testing tool. You should see the list of users 
	being returned, with each user appearing after a delay of one second.

 28. Asynchronous
 	By default, the embedded Tomcat server provided by Spring Boot utilizes a thread pool to 
 	handle incoming requests concurrently. This concurrent processing allows multiple requests 
 	to be handled simultaneously, which can improve the responsiveness and scalability of 
 	your application.


	This thread-based concurrency model is synchronous in nature, as each request is 
	processed sequentially on its assigned thread. The thread will not be available to
	 handle other requests until it completes processing the current request. 
	 This behavior is suitable for many applications and is the default mode of operation 
	 in Spring Boot.
	
	Spring Boot also provides support for asynchronous processing. By using the @Async annotation
	 and returning a CompletableFuture or a DeferredResult from an endpoint method, you can 
	 achieve true asynchronous behavior where the processing of a request can be delegated to a 
	 separate thread, freeing up the Tomcat thread to handle other requests in the meantime.

	So, while embedded Tomcat in Spring Boot provides concurrency through thread pooling, allowing
	 for efficient handling of multiple requests, the asynchronous processing support provided 
	 by Spring Boot enables even more advanced asynchronous behavior when needed.
	 
		1. Add the @EnableAsync annotation to your application's main class or a configuration class. This enables support for asynchronous processing.

		2. Annotate your endpoint methods with @Async to indicate that they should be executed asynchronously.

		3. Return a CompletableFuture or a DeferredResult from the endpoint method to represent the asynchronous result.
 
 29. springboot - single service - transaction - if fails - save data in some tables but not in others
 		In a scenario where a transaction fails and you need to rollback or revert changes made 
 		to multiple tables while keeping the changes made to one table, you can use selective 
 		rollback techniques.
 		
 		The @Transactional annotation is typically used in Spring applications to define 
 		transactional boundaries for methods or classes. It indicates that a method or a group 
 		of methods should be executed within a database transaction context.
 		
 		Database Operations: When you need to perform multiple database operations as a single 
 		unit of work, such as saving multiple entities or updating related tables. The @Transactional
 		 annotation ensures that either all operations succeed and are committed, 
 		 or they are rolled back as a whole, maintaining data consistency.
 		
 		@Transactional
		public class MyService {
			public void updateTables() {
	        EntityTransaction transaction = entityManager.getTransaction();
	        try {
	            transaction.begin();
	        }.......
	        	transaction.commit();
	        }catch(){
	        	transaction.rollback();
	        }
	    }
	    
 30. Auth interceptor to process auth header.
 
 31. java stream order: 
 		source -> intermediate1 -> intermediate2 -> terminal -> stream of data
 
 32. Database cluster/non-cluster index?
		CREATE CLUSTERED INDEX IX_Employees_EmployeeID ON Employees(EmployeeID);
			With this clustered index, the data in the "Employees" table will be physically ordered 
			by the "EmployeeID" values. This can be beneficial if we frequently perform queries 
			that involve searching or sorting based on the employee ID.
			
			it's important to note that creating a cluster index can have an impact on the insert and update operations, as the data may need to be rearranged to maintain the physical ordering.
			Non-cluster indexes are useful for speeding up search operations on frequently queried columns but may introduce additional overhead during insert, update, and delete operations since the indexes need to be maintained.
			
		
		CREATE NONCLUSTERED INDEX IX_Employees_Department ON Employees(Department);
			This non-clustered index on the "Department" column will create a separate index structure
			 that allows faster lookups based on department values. 
		
		When to use what?
		 Primary Key: If the table has a primary key that uniquely identifies each row, it is a common choice for the clustered index. The primary key is often used for efficient lookups and joins.
		
		 Column Filtering: When queries frequently involve filtering or searching based on specific column values, a non-clustered index can significantly improve performance. Non-clustered indexes allow for efficient lookup and retrieval of data based on the indexed column values.
		
		 Join Operations: If you frequently perform join operations between two or more tables based on specific columns, creating non-clustered indexes on the join columns can enhance the join performance. These indexes can speed up the process of locating and matching rows from different tables.
		 
