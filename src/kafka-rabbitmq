Cluster(1) -> broker(*)->topics(*) -> partitions(*) -> offset(*) -> msg(1)

Kafka has time to live for messages. They are not deleted even after consumer reads the message, because other 
consumers might read it too. They are deleted only after time expiry.
RabbitMQ messages are deleted as soon as consumer reads it.

Consumers can parallelly read from different partitions. 

kafka server = kafka broker = kafka node

Cluster has multiple brokers, one acts as leader and others are followers (replication sets). 
Leader handles writes and followers read

no kafka server can run without zookeeper

zookeeper to manager multiple kafka brokers

readme: 
$ bin/zookeeper-server-start.sh config/zookeeper.properties
$ bin/kafka-server-start.sh config/server.properties (only starts single broker)

then start this service


RabbitMQ VS Kafka:
RabbitMQ sends messages to users. These messages are removed from the queue once they are processed and acknowledged. 
Kafka is a log. It uses continuous messages, which stay in the queue until the retention time expires.

RabbitMQ employs the smart broker/dumb consumer model. The broker consistently delivers messages to consumers 
and keeps track of their status. 
Kafka uses the dumb broker/smart consumer model. Kafka doesnâ€™t monitor
the messages each user has read. Rather, it retains unread messages only, preserving all messages
for a set amount of time. Consumers must monitor their position in each log.
 
 
 
 
 
 